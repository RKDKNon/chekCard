from time import sleep

from smartcard.CardMonitoring import CardMonitor, CardObserver
from PIL import Image
from smartcard.System import readers
from smartcard.util import HexListToBinString, toHexString, toBytes
import requests
import base64
import tkinter as tk

token = ''
# Check card
SELECT = [0x00, 0xA4, 0x04, 0x00, 0x08]
THAI_CARD = [0xA0, 0x00, 0x00, 0x00, 0x54, 0x48, 0x00, 0x01]

# CID
CMD_CID = [0x80, 0xb0, 0x00, 0x04, 0x02, 0x00, 0x0d]

# TH Fullname
CMD_THFULLNAME = [0x80, 0xb0, 0x00, 0x11, 0x02, 0x00, 0x64]

# EN Fullname
CMD_ENFULLNAME = [0x80, 0xb0, 0x00, 0x75, 0x02, 0x00, 0x64]

# Date of birtah
CMD_BIRTH = [0x80, 0xb0, 0x00, 0xD9, 0x02, 0x00, 0x08]

# Gender
CMD_GENDER = [0x80, 0xb0, 0x00, 0xE1, 0x02, 0x00, 0x01]

# Card Issuer
CMD_ISSUER = [0x80, 0xb0, 0x00, 0xF6, 0x02, 0x00, 0x64]

# Issue Date
CMD_ISSUE = [0x80, 0xb0, 0x01, 0x67, 0x02, 0x00, 0x08]

# Expire Date
CMD_EXPIRE = [0x80, 0xb0, 0x01, 0x6F, 0x02, 0x00, 0x08]

# Address
CMD_ADDRESS = [0x80, 0xb0, 0x15, 0x79, 0x02, 0x00, 0x64]

# Photo_Part1/20
CMD_PHOTO1 = [0x80, 0xb0, 0x01, 0x7B, 0x02, 0x00, 0xFF]

# Photo_Part2/20
CMD_PHOTO2 = [0x80, 0xb0, 0x02, 0x7A, 0x02, 0x00, 0xFF]

# Photo_Part3/20
CMD_PHOTO3 = [0x80, 0xb0, 0x03, 0x79, 0x02, 0x00, 0xFF]

# Photo_Part4/20
CMD_PHOTO4 = [0x80, 0xb0, 0x04, 0x78, 0x02, 0x00, 0xFF]

# Photo_Part5/20
CMD_PHOTO5 = [0x80, 0xb0, 0x05, 0x77, 0x02, 0x00, 0xFF]

# Photo_Part6/20
CMD_PHOTO6 = [0x80, 0xb0, 0x06, 0x76, 0x02, 0x00, 0xFF]

# Photo_Part7/20
CMD_PHOTO7 = [0x80, 0xb0, 0x07, 0x75, 0x02, 0x00, 0xFF]

# Photo_Part8/20
CMD_PHOTO8 = [0x80, 0xb0, 0x08, 0x74, 0x02, 0x00, 0xFF]

# Photo_Part9/20
CMD_PHOTO9 = [0x80, 0xb0, 0x09, 0x73, 0x02, 0x00, 0xFF]

# Photo_Part10/20
CMD_PHOTO10 = [0x80, 0xb0, 0x0A, 0x72, 0x02, 0x00, 0xFF]

# Photo_Part11/20
CMD_PHOTO11 = [0x80, 0xb0, 0x0B, 0x71, 0x02, 0x00, 0xFF]

# Photo_Part12/20
CMD_PHOTO12 = [0x80, 0xb0, 0x0C, 0x70, 0x02, 0x00, 0xFF]

# Photo_Part13/20
CMD_PHOTO13 = [0x80, 0xb0, 0x0D, 0x6F, 0x02, 0x00, 0xFF]

# Photo_Part14/20
CMD_PHOTO14 = [0x80, 0xb0, 0x0E, 0x6E, 0x02, 0x00, 0xFF]

# Photo_Part15/20
CMD_PHOTO15 = [0x80, 0xb0, 0x0F, 0x6D, 0x02, 0x00, 0xFF]

# Photo_Part16/20
CMD_PHOTO16 = [0x80, 0xb0, 0x10, 0x6C, 0x02, 0x00, 0xFF]

# Photo_Part17/20
CMD_PHOTO17 = [0x80, 0xb0, 0x11, 0x6B, 0x02, 0x00, 0xFF]

# Photo_Part18/20
CMD_PHOTO18 = [0x80, 0xb0, 0x12, 0x6A, 0x02, 0x00, 0xFF]

# Photo_Part19/20
CMD_PHOTO19 = [0x80, 0xb0, 0x13, 0x69, 0x02, 0x00, 0xFF]

# Photo_Part20/20
CMD_PHOTO20 = [0x80, 0xb0, 0x14, 0x68, 0x02, 0x00, 0xFF]


# tis-620 to utf-8
def thai2unicode(data):
    resp = ''
    if isinstance(data, list):
        resp = bytes(data).decode('tis-620').replace('#', ' ')
        return resp.strip()
    else :
        return data

class PrintObserver(CardObserver):

    def update(self, observable, actions):
        (addedcards, removedcards) = actions
        def getData(cmd, req = [0x00, 0xc0, 0x00, 0x00]):
            data, sw1, sw2 = connection.transmit(cmd)
            data, sw1, sw2 = connection.transmit(req + [cmd[-1]])
            return [data, sw1, sw2];


        for card in addedcards:
            for reader in readers():
                connection = reader.createConnection()
                connection.connect()
                atr = connection.getATR()
                print("ATR: " + toHexString(atr))
                if (atr[0] == 0x3B & atr[1] == 0x67):
                    req = [0x00, 0xc0, 0x00, 0x01]
                else :
                    req = [0x00, 0xc0, 0x00, 0x00]
                          
                # Check card
                data, sw1, sw2 = connection.transmit(SELECT + THAI_CARD)
                print("Select Applet: %02X %02X" % (sw1, sw2))

                # CID
                data = getData(CMD_CID, req)
                cid = thai2unicode(data[0])
                print("CID: " + cid)

                # TH Fullname
                data = getData(CMD_THFULLNAME, req)
                name_th = thai2unicode(data[0])
                print("TH Fullname: " + thai2unicode(data[0]))

                # EN Fullname
                data = getData(CMD_ENFULLNAME, req)
                name_en = thai2unicode(data[0])

                print("EN Fullname: " + thai2unicode(data[0]))

                # Date of birth
                data = getData(CMD_BIRTH, req)
                dob = thai2unicode(data[0])
                print("Date of birth: " + thai2unicode(data[0]))

                # Gender
                data = getData(CMD_GENDER, req)
                gender = thai2unicode(data[0])
                print("Gender: " + thai2unicode(data[0]))

                # Card Issuer
                data = getData(CMD_ISSUER, req)
                card_issuer = thai2unicode(data[0])
                print("Card Issuer: " + thai2unicode(data[0]))

                # Issue Date
                data = getData(CMD_ISSUE, req)
                issue_date = thai2unicode(data[0])
                print("Issue Date: " + thai2unicode(data[0]))

                # Expire Date
                data = getData(CMD_EXPIRE, req)
                expire_date = thai2unicode(data[0])
                print("Expire Date: " + thai2unicode(data[0]))

                # Address
                data = getData(CMD_ADDRESS, req)
                address = thai2unicode(data[0])
                print("Address: " + thai2unicode(data[0]))

                # PHOTO
                photo = getData(CMD_PHOTO1, req)[0]
                photo += getData(CMD_PHOTO2, req)[0]
                photo += getData(CMD_PHOTO3, req)[0]
                photo += getData(CMD_PHOTO4, req)[0]
                photo += getData(CMD_PHOTO5, req)[0]
                photo += getData(CMD_PHOTO6, req)[0]
                photo += getData(CMD_PHOTO7, req)[0]
                photo += getData(CMD_PHOTO8, req)[0]
                photo += getData(CMD_PHOTO9, req)[0]
                photo += getData(CMD_PHOTO10, req)[0]
                photo += getData(CMD_PHOTO11, req)[0]
                photo += getData(CMD_PHOTO12, req)[0]
                photo += getData(CMD_PHOTO13, req)[0]
                photo += getData(CMD_PHOTO14, req)[0]
                photo += getData(CMD_PHOTO15, req)[0]
                photo += getData(CMD_PHOTO16, req)[0]
                photo += getData(CMD_PHOTO17, req)[0]
                photo += getData(CMD_PHOTO18, req)[0]
                photo += getData(CMD_PHOTO19, req)[0]
                photo += getData(CMD_PHOTO20, req)[0]
                data = bytes(photo)
                
                base64_encoded = base64.b64encode(data).decode('utf-8')


                f = open(cid + ".jpg", "wb")
                f.write(data)
                f.close


                url = "https://api.socare.app/api/event_read_card"

                # Data to be sent in the POST request (can be a dictionary, JSON, or any other valid data)
                data = {
                    "id": cid,
                    "name_th": name_th,
                    "name_en": name_en,
                    "dob": dob,
                    "gender": gender,
                    "card_issuer": card_issuer,
                    "issue_date": issue_date,
                    "expire_date": expire_date,
                    "address": address,
                    "img":base64_encoded,
                    "token":token
                }

                # Send the POST request
                if cid:
                    response = requests.post(url, data=data)
                    print(response)



        for card in removedcards:
            print("-Removed: ", toHexString(card.atr))
            
            url = "https://api.socare.app/api/event_read_card"
            data = {
                "id": "clear"
            }
            # Send the POST request
            response = requests.post(url, data=data)

            print(response)


if __name__ == '__main__':
    print("Insert or remove a smartcard in the system.")
    print("Press Ctrl+C to exit.")
    token = input("Token: ")
    cardmonitor = CardMonitor()
    cardobserver = PrintObserver()
    cardmonitor.addObserver(cardobserver)
    try:
        while True:
            sleep(1) 
    except KeyboardInterrupt:
        pass
    finally:
        cardmonitor.deleteObserver(cardobserver)

# Exit program
sys.exit()        
